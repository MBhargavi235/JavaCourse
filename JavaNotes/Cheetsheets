Introduction to Programming with Java

Concepts

What is Java?
Applications & Career Opportunities with Java
Hello World Program in Java
Arithmetic Operations in Java
Addition
Subtraction
Multiplication
Division
Modulo Operation
 

1. Introduction

In this course, you will be introduced to a new programming language called Java. The following sessions assume that you understand the fundamental concepts
of programming and are comfortable writing code in Python. This is a fast-paced course compared to Programming Foundations with Python where the fundamentals 
are explained in much more detail. So, please revise our Python course once, before proceeding further.

1.1 What is Java?

Java is a popular object-oriented programming language. It was created in 1995 and is owned by Oracle.

Java is a secure, fast, and powerful programming language. Java works on different platforms (Windows, Mac, Linux, etc.). It has huge community support 
(tens of millions of developers).

1.2 Why learn another Programming Language?

Python is an extremely good language to start learning programming for various reasons. It has a simple syntax and a powerful standard library. 
This simplicity and power of Python have attracted a huge developer community who have built a wide variety of third-party libraries that simplify 
a lot of programming tasks.

So this brings us to the question, why learn another programming language?

Different programming languages have different strengths. Some languages are good for quickly writing small scripts, some are better suited for working on
a large-scale project involving multiple developers. The same feature of the programming language which brings certain advantages in some aspects may also 
bring disadvantages in other aspects.

Python - A Dynamic Programming Language

Python belongs to a class of programming languages called dynamic languages. The syntax of this category of languages is considered a bit informal. 
Informal in the sense that a data type of a variable or return type of a function/method, etc., is never explicit or formally pre-defined. You can directly 
assign a value to a variable and later assign a value of a different type to the same variable. This informality simplifies the syntax and makes it easy to
write Python code. But this also means the programmer has to remember certain things. It is up to the developer to ensure that the right type of value exists 
in a variable when a particular method is called. If the developer misses these types of things, the code will run into exceptions during runtime.

Java - A Static Programming Language

On the other hand, we have programming languages like C, C++, and Java that are more formal. These are often referred to as static programming languages. 
These languages protect you by forcing you to be upfront and formal about the kind of object each variable is going to contain in its lifetime. As the developer
mentions the data types of the variables upfront, before using them, these languages could use this knowledge to

report some of the possible errors to the developer before the code is executed.
optimize functionalities to different data types and thereby increase performance and speed of execution.

You may even notice a performance improvement of 5x - 10x when the same logic is written in Java or C++ instead of Python.

As a developer, you should understand the strengths of different languages and should be able to use the appropriate language as per the needs of the project 
at hand. There are certain features like variables, conditionals, loops, functions, etc. that most programming languages have in common. So when learning 
a new programming language you should focus on differences in syntax. You should try to compare different aspects of the new programming language with 
different programming languages that you already know to understand what is common among them and what are the key differences.

1.3 Why learn Java instead of C/C++?

For a Python programmer, it is easier to learn Java when compared to C++

Java includes a larger standard library than C/C++
The syntax of Java is less complicated than the syntax of C++
Java is usually considered to be halfway between C/C++ and Python in terms of performance, and ease of programming. This balance has made Java an attractive 
option for many enterprises. Java was considered the most popular programming language for more than 20 years (until the early 2020s).

With Java, it is possible to easily develop Cross-Platform applications. The same Java application can be run on different Operating Sytems like Windows, 
Ubuntu, etc. which is not possible with C/C++. (You will learn more about this later.)

1.4 Applications & Career Opportunities with Java

Java can be used to develop a wide variety of applications.

Mobile Applications
Web-based and Desktop Applications
Server-Based Applications, etc.

As Java has been the primary language of choice for many enterprises for quite some time, there are multiple job roles that require developers who can program in Java.

Java Developer
Java Architect
Java Web Developer
Java Android Developer, etc.

2. Hello World Program in Java

Below is the code to display the message "Hello World!" in Java.

Code

class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello World!");
    }
}

Output
Hello World!

Java is a programming language that incorporates the concepts of Object-Oriented programming to the fullest. Every Java program must define a new class. 
The execution of the program starts from a method named main in this class. You can directly use other predefined classes or import classes from the standard library.
Now let us dive into the above Java code.

In the above Hello World program, HelloWorld is the name of the class. You can define a new class using the class keyword.

Syntax

class NameOfTheClass {

}

Naming Convention: In both Java and Python, the programmers generally follow pascal case notation for naming classes.
We define the method and attributes of that class within the curly braces {}.

Note: Just as we use indentation in Python to mention that the following code belongs to class definition or method definition. We use curly braces {} in Java.

In the line, public static void main(String[] args) we are defining a method with the name main. Every Java application must consist of a method called main. 
It serves as an entry point for the application (The code execution begins from the main method). The next set of curly braces contains the implementation of 
the main method

We will learn the meanings of the keywords public, static, void and String[] later in the course.

In Java, System.out.println() statement is used to print a line of output to the console.

System is a class from the core library provided by Java.
out is an object that controls the output.
println() is a method associated with that object that receives a single argument.

3. Arithmetic Operations in Java

3.1 Addition

Addition is denoted by + sign. It gives the sum of two numbers.

Code

class Addition {
    public static void main(String[] args) {
        System.out.println(2 + 5);
        System.out.println(1 + 1.5);
    }
}


Output
 7
 2.5
 
3.2 Subtraction

Subtraction is denoted by - sign. It gives the difference between the two numbers.

Code

class Subtraction {
    public static void main(String[] args) {
        System.out.println(5 - 2);
    }
}

Output
3

3.3 Multiplication

Multiplication is denoted by * sign. It gives the product of two numbers.

Code

class Multiplication {
    public static void main(String[] args) {
        System.out.println(5 * 2);
        System.out.println(5 * 0.5);
    }
}

Output
10
2.5

3.4 Division

Division is denoted by / sign. It returns the quotient as a result.

In contrast to Python which returns a float, Java returns an integer. During division, Python internally converts the integer values to float data type. 
The conversion of one data type to another data type is called Type Conversion.

We will learn more about Type Conversions later in the course.

Code

class Division {
    public static void main(String[] args) {
        System.out.println(5 / 2);
        System.out.println(4 / 2);
    }
}

Output
2
2

Comparison with Python

print(5 / 2)
print(4 / 2)

Output
2.5
2

3.5 Modulo Operation

Modulo is denoted by % sign. It returns the modulus (remainder) as a result.

Code

class Modulus {
    public static void main(String[] args) {
        System.out.println(5 % 2);
        System.out.println(4 % 2);
    }
}

Output
1
0

//2.Introduction to Java > Variables and Data Types | Reading Material//

Variables and Data Types
Concepts

Variables
Declaring a Variable
Initializing a Variable
Defining a Variable
Data Types
Primitive Data Types
Non-Primitive Data Types
 

Introduction

In this unit, we will learn some basics of Java, like storing information (integers, characters, sequence of characters, etc) and the data types that 
are supported by Java.

1. Variables

Variables are like containers for storing information.

1.1 Declaring a Variable

A Variable is created when it is declared, and to declare a variable, we must specify the type of data first, followed by the variable name.

Syntax

dataType variableName;

dataType: It specifies the type of information we are storing in the variable.
variableName: It will say about the name given to the variable for storing that information.

The Java programming language is statically-typed, which means that all variables must first be declared before they can be used.

For example, to store information of an integer we need to declare a variable using the keyword int

Later in this module, we will learn different data types that Java supports to store information

Naming Convention: In Java, the programmers generally follow camel case notation. Whereas in Python, snake case notation is followed.

Comparison with Python

Java:

Camel case notation is followed	
Examples: firstName, lastName

Python

Snake case notation is followed
Examples: first_name, last_name

1.2 Initializing a Variable

Assigning a value to a variable for the first time is called Initialization. Memory is allocated when a variable is initialized.

Code
class Main {
    public static void main(String[] args) {
       int points;  // Declaration
       points = 90;  // Initialization, information is assigned to the variable 'points'
    }
}

A variable is only a name given to a memory location. All the operations done on the variable affect that memory location

1.3 Defining a Variable

Declaring and initializing a variable in a single statement is called Defining a variable.

Code

class Main {
    public static void main(String[] args) {
       int points;  // Declaration
       points = 90;  // Initialization
       int totalPoints = 100;  // Definition

       System.out.println(points);
       System.out.println(totalPoints);
    }
}

Output
90
100

Comparison with Python

points = 90
print(points)

Output
90

Java executes the code line-by-line

Code

class Main {
    public static void main(String[] args) {
        System.out.println(points);
        int points = 90;
    }
}

Output

file.java:3: error: cannot find symbol
        System.out.println(points);
                           ^
  symbol:   variable points
  location: class Main
1 error

Variable points is not created by the time we tried to print.

As Java programming language is a statically typed language. So before using the points variable we must declare it.

2. Data Types

In programming languages, every value or data has an associated type known as data type.

Java supports various data types. These data types are categorized into,

Primitive Data Types
Non-Primitive Data Types

2.1 Primitive Data Types

Primitive data types are those that are predefined by the programming language (Java)

Below are the primitive data types in Java,

boolean
char
byte
short
int
long
float
double

Data types determine how the value or data can be used in the program. For example, mathematical operations can be done on integers (i.e., int, float, etc).

2.1.1 boolean

In a general, anything that can take one of two possible values is considered a Boolean. Examples include the data that can take values like

True or False
Yes or No
0 or 1
On or Off, etc.

As per the Java Syntax, true and false are considered Boolean values.

Comparison with Python

Java

true
false

Python

True
False

Code

class Main {
    public static void main(String[] args) {
        boolean canLearn = true;
        System.out.println(canLearn);
    }
}

Output
true

Note: In Java, every program begins with the main method of a class. Use the above code template to practice declaring various types of variables.


2.1.2 char

The char data type is used to store a single character. A char value must be represented using single quotes, like 'A'.

Code

char alphabet = 'A';

2.1.3 byte

The byte data type is used to store integers (positive, negative and zero) without any fractional part. It is used to store small values. The range of 
values is -128 to 127.

Code

byte points = 100;

2.1.4 short

The short data type is used to store integers without any fractional part. It is used to store values that are bigger than a byte. The range of 
values is -32,768 to 32,767.

Code

short number = 28745;

2.1.5 int

The int data type is used to store integers without any fractional part. It is used to store values that are bigger than short. The range of values is -231 to 231-1.

Code

int distance = 2036372;

2.1.6 long

The long data type is used to store large integers without any fractional part. It is used to store values that are bigger than int. The range of values 
is -263 to 263-1

The long values should contain the suffix 'l' or 'L'

Code

long area = 203637254L;

2.1.7 float

The float data type is used to store any number with a decimal point. The float data type stores a value up to 7 point precision (ex: 12.1234567). 
Hence, it is used when less precision is required.

The float values should contain the suffix 'f' or 'F'

Code

float height = 5.10f;

2.1.8 double

The double data type is used to store any number with a decimal point. The double data type stores a value up to 16 point precision. Hence, 
it is used when more precision is required.

The double values may contain the suffix 'd' or 'D'

Code

double length = 5.112;
double breadth = 9.2345D;

Data Type	         Size (in bits)	                 Range of Values	                Example
 boolean	              1	                            true, false	                 true, false
 byte	                 8	                            -128 to 127	                 100, -126
 char	                 16	                     ASCII values from 0 to 255	        'a', '7'
 short	                16	                          -215 to 215-1	                -24456, 4532
 int	                  32	                          -231 to 231-1	                -2036372537, 4500
 long                 	64	                          -263 to 263-1	                 3847539L, 8589934592L
 float	                32	                     up to 7 decimal points	             1.23f, 5.67F
 double	               64	                     up to 16 decimal points	            1.23456d, 5.6789D

2.2 Non-Primitive Data Types

These data types are used to store multiple values. non-primitive data types are defined by the programmer.

In Java programming, all non-primitive data types are simply called objects.

Some commonly used non-primitive data types are,

String (String is the keyword)
Class (class is the keyword)
Array

2.2.1 String

The String data type is simply a sequence of characters. For example, "Rahul" is a string which consists of the characters 'R', 'a', 'h', 'u', and 'l'.

In Java, double quotes (") are used to represent a string.

Code

String name = "Rahul";

Comparison with Python

Java

Strings are represented using double quotes ("). Characters are represented using single quotes (').
Examples: "Rahul", 'a'	

Python

Both strings and characters can be represented using either single quotes or double quotes
Examples: "Rahul", "a", 'Ajay'


Possible Mistake

Double quotes (") are used to represent a string in Java. Using single quotes (') for strings results in an error.

Incorrect Code

class Main {
    public static void main(String[] args) {
        String name = 'Rahul';
        System.out.println(name);
    }
}

Output:

file.java:3: error: unclosed character literal
        String name = '
        
Correct Code

class Main {
    public static void main(String[] args) {
        String name = "Rahul";
        System.out.println(name);
    }
}

Output
Rahul

We will learn more about String, Class and Array later in the course.

//3.Introduction to Java > BigIntegers | Reading Material//

BigIntegers

Concepts

BigInteger
Declaring a BigInteger
Initialization
BigInteger Methods
Addition
Subtraction
Multiplication
Division
Exponentiation
Type Conversions with BigIntegers
Converting Integers to BigInteger
Converting BigInteger to Integers or String
BigInteger Constants

Introduction

In the previous unit, we learned about different data types like int, long, etc in Java. Using these data types we can store numbers of different ranges. 
For example int (-231 to 231-1), long (-263 to 263-1), etc.

In real-world applications, we may get use cases where we need to store large integers which int and long data types cannot handle. For example,
the factorial of 21 is 51090942171709440000, which is too big for an int or long type to store.

Example

class Main {
    public static void main(String[] args) {
        long num = 51090942171709440000L;
        System.out.println(num);
    }
}

Output

file.java:3: error: integer number too large
        long num = 51090942171709440000L;
        
In the above example, the value of num is greater than 263-1 (range of long data type). So it results in an error.

How to store large numbers in Java?

Java provides a class called BigInteger to handle large numbers.

Let's learn how to store large integers using the BigInteger class and perform different operations on them.

1. BigInteger

The BigInteger is the class used for mathematical operations which involve very big integer calculations that are outside the limit of all 
available primitive data types.

1.1 Declaring a BigInteger

To declare the BigInteger variables we need to import the class BigInteger from java.math package.

Syntax

BigInteger bigNum;

Here,

BigInteger: is the class name.
bigNum: is the name of the BigInteger variable.

Code

import java.math.BigInteger;

class Main {
    public static void main(String[] args) {
        BigInteger bigNum; // declaring bigNum as BigInteger variable
    }
}

1.2 Initialization

To initialize a BigInteger variable, we can use the new keyword.

Syntax

BigInteger bigNum = new BigInteger(str);

Here,

bigNum: is the variable name
str: is the value to be passed as an argument. It should be of string data type.

Code
 
import java.math.BigInteger;

class Main {
    public static void main(String[] args) {
        String str = "51090942171709440000";
        BigInteger bigNum = new BigInteger(str); // declaring bigNum as BigInteger variable and initializing it.

        System.out.println(bigNum);
    }
}

Output
51090942171709440000

2. BigInteger Methods

In Java, arithmetic operators (+, -, *, /) are not permitted with BigIntegers, we have to use methods of BigInteger class to do these arithmetic operations.

Another important aspect of BigIntegers is that they are immutable. This means that you cannot change the stored value of a BigInteger object, instead, you need to assign the changed value to a new variable.

Let's see some of the methods of BigInteger.

2.1 Addition

The add() method performs the addition for the given two BigIntegers and returns the sum.

Syntax

bigNum1.add(bigNum2);

Here, bigNum1 and bigNum2 should be BigIntegers.

Code
 
import java.math.BigInteger;

class Main {
    public static void main(String[] args) {
        BigInteger bigNum1 = new BigInteger("51090942171709440000");
        BigInteger bigNum2 = new BigInteger("2432902008176640000");
        BigInteger sum = bigNum1.add(bigNum2);

        System.out.println("Sum of the BigIntegers = " + sum);
        System.out.println("bigNum1 = " + bigNum1);
        System.out.println("bigNum2 = " + bigNum2);
    }
}

Output

Sum of the BigIntegers = 53523844179886080000
bigNum1 = 51090942171709440000
bigNum2 = 24329020081766

As we have learned earlier, the BigIntegers are immutable.

From the above code we can see the BigIntegers are not changed, the add() method returned a new BigInteger which is stored in another BigInteger named as sum.

2.2 Subtraction

The subtract() method performs the subtraction for the given two BigIntegers and returns the difference.

Syntax

bigNum1.subtract(bigNum2);

Here, bigNum1 and bigNum2 should be BigIntegers.

Code
 
import java.math.BigInteger;

class Main {
    public static void main(String[] args) {
        BigInteger bigNum1 = new BigInteger("51090942171709440000");
        BigInteger bigNum2 = new BigInteger("2432902008176640000");

        BigInteger difference = bigNum1.subtract(bigNum2);

        System.out.println(difference);
    }
}

Output
48658040163532800000

2.3 Multiplication
The multiply() method performs the multiplication for the given two BigIntegers and returns the product.

Syntax

bigNum1.multiply(bigNum2);

Here, bigNum1 and bigNum2 should be BigIntegers.

Code
 
import java.math.BigInteger;

class Main {
    public static void main(String[] args) {
        BigInteger bigNum1 = new BigInteger("51090942171709440000");
        BigInteger bigNum2 = new BigInteger("2432902008176640000");

        BigInteger product = bigNum1.multiply(bigNum2);

        System.out.println(product);
    }
}

Output
124299255809188481393766275481600000000

2.4 Division

The divide() method performs the division for the given two BigIntegers and returns the quotient.

Syntax

bigNum1.divide(bigNum2);

Here, bigNum1 and bigNum2 should be BigIntegers.

Code
 
import java.math.BigInteger;

class Main {
    public static void main(String[] args) {
        BigInteger bigNum1 = new BigInteger("124299255809188481393766275481600000000");
        BigInteger bigNum2 = new BigInteger("2432902008176640000");

        BigInteger quotient = bigNum1.divide(bigNum2);

        System.out.println(quotient);
    }
}

Output

51090942171709440000

2.5 Exponentiation

The pow() method performs the exponentiation for the given BigInteger

It returns the result of the bigNumexponent

Syntax

bigNum.pow(exponent);

Here,

bigNum: should be a BigInteger
exponent: should be of int data type, exponent should be greater than or equal to 0. If the exponent is less than 0, then an error will be thrown.

Code
 
import java.math.BigInteger;

class Main {
    public static void main(String[] args) {
        BigInteger bigNum = new BigInteger("632");
        int exp = 16;
        BigInteger power = bigNum.pow(exp); // gives result as (num)^exp

        System.out.println(power);
    }
}

Output

647848194136825331389866418130111944223358976

3. Type Conversions with BigIntegers

3.1 Converting Integers to BigInteger

The valueOf() method can be used to convert integers (i.e., int or long) values to a BigInteger. It accepts a single parameter and returns a BigInteger.

We will learn more about Type Conversions later in the course.

The syntax for initializing a BigInteger variable using the valueOf() method is as follows:

Syntax

BigInteger.valueOf(num);

Here, num is the number to be converted as a BigInteger. It should be of long data type. If an int data type is provided, it will be implicitly converted to long.

Code
 
import java.math.BigInteger;

class Main {
    public static void main(String[] args) {
        int num = 2022;
        long longNum = 435468567463L;

        BigInteger bigNum1 = BigInteger.valueOf(num);
        BigInteger bigNum2 = BigInteger.valueOf(longNum);

        System.out.println(bigNum1);
        System.out.println(bigNum2);
    }
}

Output
2022
4354685674

3.2 Converting BigInteger to Integers or String

We can convert BigInteger to int, long, and String data types using the following methods,

intValue()
longValue()
doubleValue()
floatValue()
toString()

For all data types other than String, when converting BigIntegers to other data types, we must ensure that the number falls within the range of that data type
(i.e., int, long, etc).

3.2.1 Converting BigInteger to int Type

We can use the intValue() method to convert a BigInteger to an int data type.

Syntax

bigNum.intValue();

Code

import java.math.BigInteger;

class Main {
    public static void main(String[] args) {
        int num = 2022;
        BigInteger bigNum1 = BigInteger.valueOf(num);

        num = bigNum1.intValue();

        System.out.println(num);
    }
}

Output
2022

In the above code, we can see that the int value is initially converted to BigInteger and later using the intValue() method the BigInteger is converted 
to int and assigned the int value to the variable num.

Similarly, we can convert BigInteger to long, float, double, and String data types.

Let's look at the below example,

Code
 
import java.math.BigInteger;

class Main {
    public static void main(String[] args) {
        String str = "45900";
        BigInteger bigNum1 = new BigInteger(str);

        str = bigNum1.toString();
        long longNum = bigNum1.longValue();
        float floatNum = bigNum1.floatValue();
        double doubleNum = bigNum1.doubleValue();

        System.out.println(str);
        System.out.println(longNum);
        System.out.println(floatNum);
        System.out.println(doubleNum);
    }
}

Output

45900
45900
45900.0
45900.0

4. BigInteger Constants

The BigInteger class defines some constants for the ease of initialization.

BigInteger.ZERO: The BigInteger constant for 0
BigInteger.ONE: The BigInteger constant for 1
BigInteger.TWO: The BigInteger constant for 2
BigInteger.TEN: The BigInteger constant for 10
Let's look at defining the BigInteger variables using BigInteger constants.

Code
 
 import java.math.BigInteger;

class Main {
    public static void main(String[] args) {
        BigInteger bigNum0 = BigInteger.ZERO;
        BigInteger bigNum1 = BigInteger.ONE;
        BigInteger bigNum2 = BigInteger.TWO;
        BigInteger bigNum10 = BigInteger.TEN;

        System.out.println(bigNum0);
        System.out.println(bigNum1);
        System.out.println(bigNum2);
        System.out.println(bigNum10);
    }
}

Output

0
1
2
10

Instead of using a constructor new BigInteger(), we can directly assign these constants to BigInteger variables.

We can use these constant values without defining them.

Summary

The valueOf() method converts a long value to a BigInteger value and returns it.

BigInteger Methods:

add(): It performs the addition for the given two BigIntegers and returns the sum.
subtract(): It performs the subtraction for the given two BigIntegers and returns the difference.
multiply(): It performs the multiplication for the given two BigIntegers and returns the product.
divide(): It performs the division for the given two BigIntegers and returns the quotient.
pow(): It performs the exponentiation operation and returns the result.

Type Conversions with BigIntegers:

intValue(): It converts BigInteger to an int value and returns it.
longValue(): It converts BigInteger to a long value and returns it.
floatValue(): It converts BigInteger to a float value and returns it.
doubleValue(): It converts BigInteger to a double value and returns it.
toString(): It converts BigInteger to a String value and returns it.

BigInteger Constants:

BigInteger.ZERO: The BigInteger constant 0
BigInteger.ONE: The BigInteger constant 1
BigInteger.TWO: The BigInteger constant 2
BigInteger.TEN: The BigInteger constant 10
