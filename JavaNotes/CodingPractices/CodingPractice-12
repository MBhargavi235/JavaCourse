1.Prime Numbers from 1 to N

Given an integer N, write a program to print all the prime numbers from 1 to N.
Note: One is neither prime nor composite number.

Input
The input will be a single line containing a positive integer (N).

Output
The output should contain all the prime numbers from 1 to N, each in a new line.

Explanation

For example, if the given number is 10, as all the prime numbers from 1 to 10 are 2, 3, 5, and 7. So the output should be
2
3
5
7

Similarly, if the given number is 25, as all the prime numbers from 1 to 25 are 2,3,5,7,11,13,17,19 and 23 So the output should be 
2 
3 
5 
7 
11 
13
17
19
23

Sample Input1
10
Output 
2 
3
5 
7 

Sample Input2
25
Output
2 
3 
5 
7 
11 
13
17
19
23

Solution

import java.util.*;

class Main {
    public static void main(String[] args) {
        Scanner input=new Scanner(System.in);
        int j, count;
        int n=input.nextInt();
        for(int i=1;i<=n;i++){
             count=0;
            for(j=1;j<=i;j++){
                if(i%j==0)
                count++;
            }
            if (count==2)
        System.out.println(i);
        }
    }
}

/*
import java.util.*;

class Main {
    public static void main(String[] args) {
        Scanner input=new Scanner(System.in);
        int n=input.nextInt();
        for(int i=1;i<n+1;i++){
            int count=0;
            for(int j=2;j<i;j++){
                if(i%j==0)
                count+=1;
            }
            if (count==0 && i>1)
        System.out.println(i);
        }
    }
}
*/


2.Prime Numbers from M to N

Given two integers M and N, write a program to print all the prime numbers from M to N.

Input
The first line of input will contain a positive integer (M). The second line of input will contain a positive integer (N).

Output
The output should be containing all the prime numbers from Mto N, each in a new line.

Explanation
For example, if the given numbers are M is 5 and N is 11, as all the prime numbers from 5 to 11 are 5, 7, and 11. So the output should be
5
7
11

Similarly, if the given numbers are M is 18 and N is 40, as all the prime numbers from 18 to 40 are 19,23,29,31, and 37 So the output should be 
19
23
29
31
37

Sample Input1
5
11
Output
5
7
11

Sample Input2
18
40
Output
19
23
29
31
37

Solution

import java.util.*;

class Main {
    public static void main(String[] args) {
        Scanner input=new Scanner(System.in);
        int j, count;
        int m=input.nextInt();
        int n=input.nextInt();
        for(int i=m;i<=n;i++){
             count=0;
            for(j=1;j<=i;j++){
                if(i%j==0)
                count++;
            }
            if (count==2)
        System.out.println(i);
        }
    }
}

/*
import java.util.*;

class Main {
    public static void main(String[] args) {
        Scanner input=new Scanner(System.in);
        int m=input.nextInt();
        int n=input.nextInt();
        for(int i=m;i<n+1;i++){
            int count=0;
            for(int j=2;j<i;j++){
                if(i%j==0)
                count+=1;
            }
            if (count==0 && i>1)
        System.out.println(i);
        }
    }
}
*/

3.Half Pyramid

Write a program to print the half pyramid pattern up to the given N number of rows.

Input
The input will be a single line containing a positive integer (N).

Output
The output should be N lines containing numbers in the half pyramid pattern. Note: There is a space after each number.

Explanation
For example, if the given number is 5, your code should print the following pattern

1 
1 2 
1 2 3 
1 2 3 4 
1 2 3 4 5 

Sample Input1
5
Output
1 
1 2 
1 2 3 
1 2 3 4 
1 2 3 4 5 

Sample Input2
4
Output
1 
1 2 
1 2 3 
1 2 3 4 

Solution

import java.util.*;

class Main {
    public static void main(String[] args) {
        Scanner input=new Scanner(System.in);
        int n=input.nextInt();
        for(int i=1;i<=n;i++){
            for(int j=1;j<=i;j++){
                System.out.print(j+" ");
            }
         System.out.println();
        }
    }
}

/*
import java.util.*;

class Main {
    public static void main(String[] args) {
        Scanner input=new Scanner(System.in);
        int n=input.nextInt();
        for(int i=0;i<n;i++){
           int p=1;
            for(int j=0;j<=i;j++){
                System.out.print(p+" ");
                p=p+1;
            }
         System.out.println();
        }
    }
}
*/

4.Numbers in Square Pattern-3

Write a program to print the numbers in the given N number of rows in the following square pattern.

1 2 3 
4 5 6
7 8 9

Input 
The input will be a single line containing a positive integer (N).

Output
The output should be N rows containing numbers up to N^2 in the square pattern.
Note: There is a space after each number.

Explanation

For example, if the given number is 3, your code should print the consecutive numbers up to N^2 in the 3 rows and 3 cloumns.

Sample Input1
3
Output
1 2 3 
4 5 6 
7 8 9 

Sample Input2
5
Output
1 2 3 4 5 
6 7 8 9 10 
11 12 13 14 15 
16 17 18 19 20 
21 22 23 24 25

Solution

import java.util.*;

class Main {
    public static void main(String[] args) {
        Scanner input=new Scanner(System.in);
        int n=input.nextInt();
        int p=1;
        for(int i=1;i<=n;i++){
            for(int j=1;j<=n;j++){
                System.out.print(p+" ");
                p+=1;
            }
         System.out.println();
        }
    }
}

5.Numbers in Rectangular Pattern-3

Write a program to print the numbers in the given  M numbe of rows and N number of columns
in the following rectangular pattern.

1 2 3 
4 5 6

Input 
The first line of input will contain a positive integer (M).
The second line of input will contain a positive integer (N).

Output
The output should be M rows and N columns containing numbers up to M X N in the rectangular pattern.
Note: There is a space after each number.

Explanation

For example, if the given number of row is 2 and number of cloumns is 3,
your code should print the consecutive numbers up to M X N in the 2 rows and 3 cloumns.

Sample Input1
2
3
Output
1 2 3 
4 5 6 

Sample Input2
7
5
Output
1 2 3 4 5 
6 7 8 9 10 
11 12 13 14 15 
16 17 18 19 20 
21 22 23 24 25
26 27 28 29 30
31 32 33 34 35

Solution

import java.util.*;

class Main {
    public static void main(String[] args) {
        Scanner input=new Scanner(System.in);
        int m=input.nextInt();
        int n=input.nextInt();
        int p=1;
        for(int i=1;i<=m;i++){
            for(int j=1;j<=n;j++){
                System.out.print(p+" ");
                p+=1;
            }
         System.out.println();
        }
    }
}


6.Half Pyramid-2

Write a program to print the numbers in the given N nunber of rows in the following half pyramid pattern.
1
2 3
4 5 6
7 8 9 10
11 12 13 14 15

Input
The input will be a single line containing a positive integer (N).

Output
The output should be N rows containing numbers in the half pyramid pattern. Note: There is a space after each number.

Explanation
For example, if the given number is 5, your code should print the consecutive numbers in the five rows in the half pyramid pattern.

Sample Input1
5
Output
1 
2 3
4 5 6
7 8 9 10
11 12 13 14 15

Sample Input2
4
Output
1 
2 3
4 5 6
7 8 9 10

Solution

import java.util.*;

class Main {
    public static void main(String[] args) {
        Scanner input=new Scanner(System.in);
        int n=input.nextInt();
        int p=1;
        for(int i=1;i<=n;i++){
            for(int j=1;j<=i;j++){
                System.out.print(p+" ");
                p+=1;
            }
         System.out.println();
        }
    }
}

7.Inverted Half Pyramid

Write a program to print the inverted half pyramid pattern up to the given N number of rows.

Input
The input will be a single line containing a positive integer (N).

Output
The output should be N lines containing numbers in the inverted pyramid pattern. Note: There is a space after each number.

Explanation
For example, if the given number is 5, your code should print the following pattern

1 2 3 4 5
1 2 3 4
1 2 3
1 2 
1

Sample Input1
5
Output
1 2 3 4 5
1 2 3 4
1 2 3
1 2 
1

Sample Input2
4
Output
1 2 3 4
1 2 3
1 2 
1

Solution

import java.util.*;

class Main {
    public static void main(String[] args) {
        Scanner input=new Scanner(System.in);
        int n=input.nextInt();
        
        for(int i=0;i<n;i++){
            for(int j=1;j<=n-i;j++){
                System.out.print(j+" ");
            }
         System.out.println();
        }
    }
}

/*
import java.util.*;

class Main {
    public static void main(String[] args) {
        Scanner input=new Scanner(System.in);
        int n=input.nextInt();
        
        for(int i=0;i<=n;i++){
            int p=1;
            for(int j=1;j<=i+1;j++){
                System.out.print("");
            }
            for(int j=1;j<=n-i;j++){
                System.out.print(p+" ");
                p+=1;
            }
         System.out.println();
        }
    }
}
*/
