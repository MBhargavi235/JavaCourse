1.GCD

Write a program to find the Greatest Common Divisor of the given two numbers M and N. 
The greatest common divisor (G.C.D) of two numbers is the largest positive integer that perfectly divides the two given numbers.

Input
The first line of input will contain a positive integer (M). The second line of input will contain a positive integer (N).

Output
The output should be a single line containing the GCD of the given two numbers.

Explanation
For example, if the given numbers are 4 and 6, the output should be 2, as no other number greater than 2 will divide the given two numbers.

Sample Input1
4
6
Ouput
2

Sample Input1
16
9
Ouput
2

Solution

import java.util.*;

class Main {
    public static void main(String[] args) {
        Scanner input=new Scanner(System.in);
        int a=input.nextInt();
        int b=input.nextInt();
        int gcd=0;
        for(int i=1;i<=a&&i<=b;i++){
            if(a%i==0 && b%i==0)
                gcd=i;
        }
        System.out.println(gcd);
    }
}

/*
import java.util.*;

class Main {
    public static void main(String[] args) {
        Scanner input=new Scanner(System.in);
        int a=input.nextInt();
        int b=input.nextInt();
        int smaller;
        if (a>b)
            smaller=b;
        else 
            smaller=a;
        int gcd=smaller;
        for(int i=1;i<=smaller;i++){
            if(a%i==0 && b%i==0)
                gcd=i;
        }
        System.out.println(gcd);
    }
}
*/

2.LCM

Write a program to find the Least Common Multiple of the given two numbers M and N. 
The least common multiple (L.C.M.) of two numbers is the smallest positive integer that is perfectly divisible by the two given numbers.

Input
The first line of input will contain a positive integer (M). The second line of input will contain a positive integer (N).

Output
The output should be a single line containing the LCM of the given two numbers.

Explanation
For example, if the given numbers are 12 and 8, the output should be 24, as 24 is the smallest number that is divisible by both 12 and 8.

Sample Input1
12
8
Ouput
24

Sample Input1
16
9
Ouput
144

Solution

import java.util.*;

class Main {
    public static void main(String[] args) {
        Scanner input=new Scanner(System.in);
        int x=input.nextInt();
        int y=input.nextInt();
        int lcm=0;
        int greater=(x>y)?x:y;
        while(true){
            if((greater%x==0)&&(greater%y==0)){
                lcm=greater;
                break;
            }
            greater+=1;
        }
        System.out.println(lcm);
    }
}

/*
import java.util.*;

class Main {
    public static void main(String[] args) {
        Scanner input=new Scanner(System.in);
        int a=input.nextInt();
        int b=input.nextInt();
        int c=a*b;
        for(int i=1;i<=c;i++){
            if(i%a==0 && i%b==0){
                System.out.println(i);
                break;
            }
        }
    }
}
*/

3.Full Pyramid-2

Given the number of rows N, write a program to print the full pyramid pattern similar to the pattern shown below

    1 
   1 2 
  1 2 3 
 1 2 3 4 
1 2 3 4 5 

Input
The input will be single line containing a positive integer (N).

Output
The Output should be N rows containing the numbers in the full pyramid pattern.
Note:There is a space after each number.

Explanation
For example, if the given number is 5, the pattern should contain 5 rows as shown below
    1 
   1 2 
  1 2 3 
 1 2 3 4 
1 2 3 4 5 

Sample Input1
5
Solution
    1 
   1 2 
  1 2 3 
 1 2 3 4 
1 2 3 4 5 

Sample Input2
3
Output
  1 
 1 2 
1 2 3

Solution

import java.util.*;

class Main {
    public static void main(String[] args) {
        Scanner input=new Scanner(System.in);
        int n=input.nextInt();
        for(int i=0;i<n;i++){
            System.out.print(" ".repeat(n-i-1));
            for(int j=1;j<=i+1;j++){
                 System.out.print(j+" ");
            }
            System.out.println();
        }
    }
}

/*
import java.util.*;

class Main {
    public static void main(String[] args) {
        Scanner input=new Scanner(System.in);
        int n=input.nextInt();
        for(int i=0;i<n;i++){
            for(int j=1;j<=n-i-1;j++){
                 System.out.print(" ");
            }
            for(int j=1;j<=i+1;j++){
                 System.out.print(j+" ");
            }
            System.out.println();
        }
    }
}
*/

4.Inverted Half Pyramid-2

Given the number of rows N, write a program to print the inverted half pyramid pattern
smilar to the pattern shown below.

* * * * * 
* * * * 
* * * 
* * 
*

Input 
The input will be single line containing a positive integer.

Output
The output should be N rows containing the asterisk(*) characters in the inverted half pyramid pattern.
Note:There is a space after each asterisk character.

Explanation
For example, if the given number is 5, pattern should contain 5 rows as shown below

* * * * * 
* * * * 
* * * 
* * 
*

Sample Input1
5
Output
* * * * * 
* * * * 
* * * 
* * 
*
Sample Input2
3
Output
* * * 
* * 
*

Solution

import java.util.*;

class Main {
    public static void main(String[] args) {
        Scanner input=new Scanner(System.in);
        int n=input.nextInt();
        for(int i=0;i<n;i++){
                 System.out.print("* ".repeat(n-i));
                 System.out.println();
        }
    }
}

/*
import java.util.*;

class Main {
    public static void main(String[] args) {
        Scanner input=new Scanner(System.in);
        int n=input.nextInt();
        for(int i=0;i<n;i++){
            for(int j=1;j<=n-i;j++){
                 System.out.print("* ");
            }
            for(int j=1;j<=i+1;j++){
                 System.out.print(" ");
            }
            System.out.println();
        }
    }
}
*/

5.Hollow Half Pyramid-1

Given the number of rows N, write a program to print the hollow half pyramid pattern
smilar to the pattern shown below.

* 
* * 
*   * 
*     * 
* * * * *

Input 
The input will be single line containing a positive integer.

Output
The output should be N rows containing the asterisk(*) characters in the holow half pyramid pattern.
Note:There is a space after each asterisk character.

Explanation
For example, if the given number is 5, pattern should contain 5 rows as shown below

* 
* * 
*   * 
*     * 
* * * * *

Sample Input1
5
Output
* 
* * 
*   * 
*     * 
* * * * *
Sample Input2
3
Output
* 
* * 
* * *

Solution

import java.util.*;

class Main {
    public static void main(String[] args) {
        Scanner input=new Scanner(System.in);
        int n=input.nextInt();
        System.out.println("*");
        for(int i=1;i<n-1;i++){
            System.out.print("*");
            System.out.print(" ".repeat(2*i-1));
            System.out.println("*");
        }
        System.out.println("* ".repeat(n));
    }
}

/*
import java.util.*;

class Main {
    public static void main(String[] args) {
        Scanner input=new Scanner(System.in);
        int n=input.nextInt();
        for(int i=0;i<n;i++){
            for(int j=0;j<i+1;j++){
                if(i==n-1 || j==0|| i==j)
                 System.out.print("* ");
                 else 
                 System.out.print("  ");
            }
            System.out.println();
        }
    }
}
*/

6.Hollow Inverted Half Pyramid-2

Given the number of rows N, write a program to print the hollow inverted half pyramid pattern
smilar to the pattern shown below.

1 2 3 4 5 
1     4 
1   3 
1 2 
1

Input 
The input will be single line containing a positive integer.

Output
The output should be N rows containing the asterisk(*) characters in the holow inverted half pyramid pattern.
Note:There is a space after each asterisk character.

Explanation
For example, if the given number is 5, pattern should contain 5 rows as shown below

1 2 3 4 5 
1     4 
1   3 
1 2 
1

Sample Input1
5
Output
1 2 3 4 5 
1     4 
1   3 
1 2 
1
Sample Input2
3
Output
1 2 3 
1 2 
1

Solution

import java.util.*;

class Main {
    public static void main(String[] args) {
        Scanner input=new Scanner(System.in);
        int n=input.nextInt();
        for(int i=0;i<n;i++)
            System.out.print((i+1)+" ");
            System.out.println();
        for(int i=n-2;i>0;i--){
            System.out.print(1);
            for(int j=2*i-2;j>-1;j--){
                 System.out.print(" ");
            }
            System.out.println(i+1);
        }
         System.out.println("1");
    }
}

/*
import java.util.*;

class Main {
    public static void main(String[] args) {
        Scanner input=new Scanner(System.in);
        int n=input.nextInt();
        for(int i=1;i<=n;i++){
            int p=0;
            for(int j=i;j<=n;j++){
                p=p+1;
                if(i==1 || j==n|| i==j)
                 System.out.print(p+" ");
                 else 
                 System.out.print("  ");
            }
            System.out.println();
        }
    }
}
*/
